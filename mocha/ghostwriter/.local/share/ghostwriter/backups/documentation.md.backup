---
title: "*rockscale* — An Algorithmic Video Upscaler with ROCm"
subtitle: "**SIT315 Task M4.T1D: Project Documentation**\\vspace{2em}"
author: "Keo Ponleou Sok"
date: "\\today"
titlepage: true
titlepage-rule-height: 1.5

output:
  pdf_document:
    latex_engine: xelatex
    toc: true
    cover: true
    number_sections: true
    keep_tex: true

header-includes:
  - \usepackage[dvipsnames]{xcolor}
  - \usepackage{graphicx}
  - \usepackage{float}
  - \floatplacement{figure}{H}
  - \usepackage{listings}
  - \usepackage{fancyhdr}
  - \usepackage[en-AU]{datetime2}
  
  - \setcounter{secnumdepth}{3}
  
  - \lstset{
      basicstyle=\ttfamily\small,
      breaklines=true,
      columns=flexible,
      showstringspaces=false,
      keywordstyle=\color{blue}\bfseries,
      commentstyle=\color{teal},
      stringstyle=\color{brown},
      identifierstyle=\color{black}
    } 
    
  - \AtBeginDocument{\hypersetup{linkcolor=black,urlcolor=black,citecolor=black}}
  
  - \usepackage{titling} 
  - \renewcommand\maketitlehooka{\vspace*{-2in}\null\vfill\thispagestyle{empty}}
  - \renewcommand\maketitlehookd{\vfill\null}
  
  - \usepackage{tocloft}
  - \renewcommand{\cftsecleader}{\cftdotfill{\cftdotsep}}
  - \renewcommand{\cftsubsecleader}{\cftdotfill{\cftdotsep}}
  - \renewcommand{\cftsubsubsecleader}{\cftdotfill{\cftdotsep}}
  
  - \fancypagestyle{plain}{\fancyhf{}\renewcommand{\headrulewidth}{0pt}} 
...

<div style="page-break-after: always;">\pagebreak</div>

\tableofcontents

<div style="page-break-after: always;">\pagebreak</div>

# Introduction

*rockscale* is a CLI program built with HIP to optimise GPU performance to upscale video using interpolation algorithms. The program uses FFmpeg to decode videos into individual frames, and each frames are copied into the device memory, where HIP interpolation kernels are ran to interpolate pixels within the frame. The program offers 3 different interpolation algorithms — bilinear, bicubic and lanczos. After interpolation, each frames are copied back to host memory, and are passed into the encoder to output a new, upscaled video. Tested video configurations include `mp4`, `mkv`, and `mov` containers, with `h264` and `h265/hevc` codec. Other video file configurations may work, but have not been tested.

# Architecture

The architecture of the program is a multithreaded producer-processor-consumer model, with each role capable of running in multiple threads to share workload. The producer in this program is the decoder, decoding the video packets into individual frames, in which thread workers are organised by the FFmpeg library itself. Frame are then passed into a bounded queue, in which the processor can consume in order to upscale through interpolation.

The processors are responsible for 